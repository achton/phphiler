____________________________________________________________________________
PHPhiler 0.3.0 configuration instructions
Copyright (c) 2003-2004 Achton N. Netherclift
____________________________________________________________________________


This document covers the configuration of PHPhiler in detail.

Contents
========
  o Editing the configuration file
  o Individual configuration
  o CSS customization


Editing the configuration file
==============================
  The configuration file is extensively commented and thus quite self-
  explanatory. All the options in the configuration file (except the
  setPHPhilerPath setting) can be used in the PHP script that generates
  the file listing, and will then supersede the default options in the
  configuration file (but only for the current PHPhiler object). This is
  explained in the section 'Individual configuration'.

  The first thing you'll want to look at is probably the appropriate actions
  that are to be taken, when PHPhiler comes across certain file suffixes.

  The actions are determined by an array containg the file suffix as key,
  and the action bitpatterns as elements. The rightmost bit (bit 0) sets
  whether the file is to be opened in a new window when its HTML-link is
  activated. The next bit (bit 1) sets whether it is to be enclosed in a
  header and footer (see below) when shown.

  An example:

  $this->setSuffixActions( array("txt"  => "10",
                                 "html" => "01",
                                 "htm"  => "01", ));

  This would NOT open .txt-files in a new browser window, but append a
  header and footer to the file. The opposite would be the case for .htm and
  .html-files. If a suffix is not included in this array, files with that
  suffix will not be listed.

  The header and footer file is determined with the two settings:

    $this->setHTMLHeaderPath('header.inc');
    $this->setHTMLFooterPath('footer.inc');

  Usage of this feature requires write access to the directory in question,
  as it creates a temporary PHP-template that displays the file.


  It's possible to have any file descripted using an external text-file that
  is placed in the same directory as the file in question. For this feature
  to work, the description file must be named EXACTLY as the file you want
  descripted, except for the suffix. You can use any suffix for the description
  files, but none that are in the suffix action array already.

    $this->setDescriptionSuffix('info');

  Using this setting, the file 'mybitmap.bmp' could be descripted through the
  file 'mybitmap.info'.

  The contents of the description file is a little like HTML. You need a
  title tag and a description tag. The contents of the title tag determines
  the title of the file in the file listing, and the description tag
  determines the description. You can set the tags using:

    $this->setTitleTag('title');
    $this->setDescTag('description');

  The above-mentioned 'mybitmap.info' could then contain the following:

    <title>My bitmap file</title>
    <description>This is a picture that I made.</description>


  There are several ways for files to be descripted in the file listings.
  One way is to use the external description files as explained above.
  Another is to show the filename itself, without punctuation and suffix.
  The last option is to use the first line of the file itself as
  description. This is useful if you want to display a file listing of text
  files in which the first line if the text file contains a description of
  the file itself.

  To set the order in which to descript files, use this setting:

    $this->setTitleGeneration( array('external', 'filename', 'self', ));

  PHPhiler would then first search for external description files, and if
  not found, use the filename itself. Since this is always possible, the last
  option - using the first line of the file itself - would never come into
  play in this case.


  You can also set the order in which to display the various columns of
  the file listings, and whether to exclude any of them. This is done
  using an array:

    $this->setColumnHeaders( array(PHPH_TITLE => 'title',
                                   PHPH_SIZE  => 'size',
                                   PHPH_DATE  => 'date',
                                   PHPH_DESC  => 'description', ));

  The keys (PHPH_TITLE, PHPH_SIZE, etc.) are constants that determine the
  column type. The array elements ('title', 'size', etc.) are used as text
  in the column headers, so you can translate them to other languages if you
  wish.


  You can set the text to be displayed in the statusbar. Either you can
  display the actual HTTP-link, which is the standard browser behaviour.
  Or you can display the filename itself. Or you can display the title of
  the file. Or you can display a custom message. The keywords are:

    'Link'     : the actual link
    'Filename' : just the filename
    'Title'    : the title of the file

  Anything else will write the same message for all files:

    $this->setStatusbarFileComment('Click to open the file!');


  The remaining settings are self-explanatory and commented in the
  configuration file, and you should check there to see the full list of
  settings.


Individual configuration
========================
  Each option can be set individually for each PHPhiler file listing that
  you create.

  The configuration must be done for that particular object though, and done
  before the call to the index()-function:

  <?php
        $myPHPhiler = new PHPhiler('images/');
        $myPHPhiler->setNoDescriptionComment('GIF image');
        $myPHPhiler->index();
  ?>

  Note how the function calls are made to the variable that contains the
  PHPhiler object ($myPHPhiler).

  You can alter as many settings as you like before calling index() using
  this method. However, you can't change the location of the PHPhiler
  scripts for individual objects, and PHPhiler will ignore the setting if
  encountered.

  Also, the constructor for a PHPhiler object takes one optional argument,
  which is the directory to index. This path should be relative to the
  current directory.

  For an extensive demonstration of this functionality, please se PHPhiler's
  website at http://phphiler.sourceforge.net/.


CSS customization
=================
  The CSS file is commented and very easy to alter to your liking.

  Make sure you do not alter the types of any of the selectors though,
  and keep the names as they are, or PHPhiler will ignore them.

  Feel free to move the contents to another file, as long as it's available
  on the page that contains the PHPhiler file listings(s).


(end of file CONFIG)
